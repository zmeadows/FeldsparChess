#include "gtest/gtest.h"

import bitboard;
#include <vector>
TEST(Bitboard, StringToBitboardConversion)
{
    EXPECT_EQ(BITBOARD_EMPTY, BB("00000000"
                                 "00000000"
                                 "00000000"
                                 "00000000"
                                 "00000000"
                                 "00000000"
                                 "00000000"
                                 "00000000"));
}

/*
        REQUIRE(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000001") == 0b1);

        REQUIRE(BB("11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111") ==
                0b1111111111111111111111111111111111111111111111111111111111111111);

        REQUIRE(BB("10000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000") ==
                0b1000000000000000000000000000000000000000000000000000000000000000);

        REQUIRE(BB("10010111"
                "10010111"
                "10010111"
                "10010111"
                "10010111"
                "10010111"
                "10010111"
                "10010111") ==
                0b1001011110010111100101111001011110010111100101111001011110010111);

        REQUIRE(BB("01001100"
                "00010101"
                "01000100"
                "00101110"
                "11100000"
                "01001010"
                "10011000"
                "11001001") ==
                0b0100110000010101010001000010111011100000010010101001100011001001);
}

TEST_CASE("bitboard bit-scan forward", "[bitboard]")
{

        REQUIRE(bitboard_bsf(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 0);

        REQUIRE(bitboard_bsf(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000001")) == 0);

        REQUIRE(bitboard_bsf(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "10000000"
                "00000000"
                "00000000"
                "00000000")) == 31);

        REQUIRE(bitboard_bsf(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "10000000")) == 7);

        REQUIRE(bitboard_bsf(BB("10000000"
                "00010000"
                "01001110"
                "00000000"
                "01000000"
                "00001110"
                "00000000"
                "10000000")) == 7);

        REQUIRE(bitboard_bsf(BB("10000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 63);
}

TEST_CASE("bitboard bit-scan reverse", "[bitboard]")
{

        REQUIRE(bitboard_bsr(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 0);

        REQUIRE(bitboard_bsr(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000001")) == 0);

        REQUIRE(bitboard_bsr(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "10000000"
                "00000000"
                "00000000"
                "00000000")) == 31);

        REQUIRE(bitboard_bsr(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "10000000")) == 7);

        REQUIRE(bitboard_bsr(BB("10000000"
                "00010000"
                "01001110"
                "00000000"
                "01000000"
                "00001110"
                "00000000"
                "10000000")) == 63);

        REQUIRE(bitboard_bsr(BB("10000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 63);
}

TEST_CASE("bitboard population count", "[bitboard]")
{

        REQUIRE(bitboard_popcount(BB("10000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 1);

        REQUIRE(bitboard_popcount(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")) == 0);

        REQUIRE(bitboard_popcount(BB("00010000"
                "00010000"
                "00010000"
                "00010000"
                "00010000"
                "00010000"
                "00010000"
                "00010000")) == 8);

        REQUIRE(bitboard_popcount(BB("11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111")) == 64);

        REQUIRE(bitboard_popcount(BB("11101111"
                "10111011"
                "11111111"
                "10101111"
                "11111101"
                "11111111"
                "11110111"
                "10101101")) == 54);

        REQUIRE(bitboard_popcount(BB("11101001"
                "10111011"
                "11001111"
                "10101111"
                "11111101"
                "10010011"
                "10110111"
                "10101001")) == 44);
}

TEST_CASE("bitboard empty/full/occupied checks", "[bitboard]")
{
        REQUIRE(bitboard_is_full(BITBOARD_FULL));

        REQUIRE(bitboard_is_full(BB("11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111"
                "11111111")));

        REQUIRE(bitboard_is_empty(BITBOARD_EMPTY));

        REQUIRE(bitboard_is_empty(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000")));

        REQUIRE(bitboard_is_occupied(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00100000"
                "00000000"
                "00000000"
                "00000000")));

        REQUIRE(bitboard_is_occupied(BITBOARD_FULL));
        REQUIRE(!bitboard_is_occupied(BITBOARD_EMPTY));
}

TEST_CASE("bitboard shift", "[bitboard]")
{

        {
                const Bitboard original = BB("00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "11111111");

                const Bitboard shifted = BB("00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "11111111"
                        "00000000");

                REQUIRE(bitboard_shifted(original, Direction::North) == shifted);
        }

        REQUIRE(bitboard_shifted(BB("11111111"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"),
                Direction::North) == BITBOARD_EMPTY);

        REQUIRE(bitboard_shifted(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "11111111"
                "00000000"),
                Direction::South) == BB("00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "11111111"));

        REQUIRE(bitboard_shifted(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "11111111"),
                Direction::South) == BITBOARD_EMPTY);

        REQUIRE(bitboard_shifted(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "11111111"),
                Direction::NorthEast) == BB("00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "01111111"
                        "00000000"));

        REQUIRE(bitboard_shifted(BB("10000000"
                "01000000"
                "00100000"
                "00010000"
                "00001000"
                "00000100"
                "00000010"
                "00000001"),
                Direction::NorthEast) == BB("00100000"
                        "00010000"
                        "00001000"
                        "00000100"
                        "00000010"
                        "00000001"
                        "00000000"
                        "00000000"));

        REQUIRE(bitboard_shifted(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "11111111"),
                Direction::NorthWest) == BB("00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "00000000"
                        "11111110"
                        "00000000"));

        REQUIRE(bitboard_shifted(BB("10000000"
                "01000000"
                "00100000"
                "00010000"
                "00001000"
                "00000100"
                "00000010"
                "00000001"),
                Direction::NorthWest) == BB("10000000"
                        "01000000"
                        "00100000"
                        "00010000"
                        "00001000"
                        "00000100"
                        "00000010"
                        "00000000"));
}

TEST_CASE("bitboard flip", "[bitboard]")
{

        REQUIRE(bitboard_flipped(BB("00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "00000000"
                "11111111")) == BB("11111111"
                        "11111111"
                        "11111111"
                        "11111111"
                        "11111111"
                        "11111111"
                        "11111111"
                        "00000000"));

        REQUIRE(bitboard_flipped(BITBOARD_EMPTY) == BITBOARD_FULL);

        REQUIRE(bitboard_flipped(BITBOARD_FULL) == BITBOARD_EMPTY);
}

TEST_CASE("iterate bitboard squares", "[bitboard]")
{
        {
                constexpr u64 bb = BB("01100000"
                        "00010000"
                        "00010000"
                        "00001000"
                        "00000100"
                        "00000100"
                        "00000000"
                        "00000001");
                u64 count = 0;
                bitboard_iter_squares(bb, [&](u64 sq) -> void { count++; });
                REQUIRE(count == 8);
        }

        {
                u64 count = 0;
                bitboard_iter_squares(BITBOARD_EMPTY, [&](u64 sq) -> void { count++; });
                REQUIRE(count == 0);
        }

        {
                constexpr u64 bb = BB("10000000"
                        "01000000"
                        "00100000"
                        "00010000"
                        "00001000"
                        "00000100"
                        "00000010"
                        "00000001");
                std::vector<Square> squares;
                bitboard_iter_squares(bb, [&](Square sq) -> void { squares.push_back(sq); });
                REQUIRE(squares == std::vector<Square>({ 0, 9, 18, 27, 36, 45, 54, 63 }));
        }
}
*/
